//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// template <>
// class [[nodiscard]] Task<void> {
//   struct Promise {
//     std::exception_ptr e_;   // No std::variant, only exception
//     std::coroutine_handle<> continuation_;
//     auto get_return_object() noexcept { return Task{*this}; }
//     void return_void() {}   // Instead of return_value()
//     void unhandled_exception() noexcept {
//       e_ = std::current_exception();
//     }
//     auto initial_suspend() { return CORO::suspend_always{}; }
//     auto final_suspend() noexcept {
//       struct Awaitable {
//         bool await_ready() noexcept { return false; }
//         auto await_suspend(CORO::coroutine_handle<Promise> h) noexcept {
//           return h.promise().continuation_;
//         }
//         void await_resume() noexcept {}
//       };
//       return Awaitable{};
//     }
//   };
//   std::coroutine_handle<Promise> h_;
//   explicit Task(Promise& p) noexcept
//       : h_{std::coroutine_handle<Promise>::from_promise(p)} {}
// public:
//   using promise_type = Promise;

//   Task(Task&& t) noexcept : h_{std::exchange(t.h_, {})} {}
//   ~Task() { if (h_ && h_.done()) h_.destroy(); }
//   // Awaitable interface
//   bool await_ready() { return false; }
//   auto await_suspend(std::coroutine_handle<> c) {
//     h_.promise().continuation_ = c;
//     return h_;
//   }
//   void await_resume() {
//     if (h_.promise().e_)
//       std::rethrow_exception(h_.promise().e_);
//   }
// };

//------------------------------------------------------------------------------
template <>
class WaitTask<void> {
  struct Promise {
    auto get_return_object() noexcept { return WaitTask{*this}; }
    void return_void() {}
    void unhandled_exception() noexcept {
      rethrow_exception(current_exception());
    }
    auto initial_suspend() { return suspend_never{}; }
    auto final_suspend() noexcept { return suspend_never{}; }
  };

 public:
  using promise_type = Promise;
  coroutine_handle<Promise> h_;
  WaitTask(Promise& p) : h_(coroutine_handle<Promise>::from_promise(p)) {}
};

//------------------------------------------------------------------------------
template <typename VoidTaskT>
WaitTask<void> WaitForTask(VoidTaskT& t) {
  co_await t;
}